<?php
return array(
	'/(\s+)继承(\s+)/i'=>'$1extends$2',
	'/([{}\s]+)公开函数(\s+)/i'=>'$1public function$2',
	'/([{};\s]+)输出([\s\'\"\(]+)/i'=>'$1echo$2',
	'/([{};\s]+)定义([\s(]+)/i'=>'$1define$2',
	'/([{};,(\s.]+)输出数组([\s\'\"\(]+)/i'=>'$1print_r$2',

	//流程控制
	'/([{};\s]+)如果([\s(]+)/i'=>'$1if$2',
	'/([{};\s]+)或者([\s(]+)/i'=>'$1elseif$2',
	'/([};\s+])反之([\s{]+)/i'=>'$1else$2',

	'/([{};\s]+)循环对象([\s(]+)/i'=>'$1foreach$2',
	'/([{};\s]+)循环([\s(]+)/i'=>'$1for$2',
	'/([{};\s]+)循环判断([\s(]+)/i'=>'$1while$2',
	'/([{};\s]+)跳出循环([\s;]+)/i'=>'$1break$2',
	
	'/([{};\s]+)跳到下次循环([\d\s;]+)/i'=>'$1continue$2',
	'/([{};\s])返回([\s\'\"\(;])/i'=>'$1return$2',
	'/([{};\s])结束([\s\'\"\(;])/i'=>'$1exit$2',
	//require
	'/([{};\s])包含文件([\s\'\"\(;])/i'=>'$1include$2',
	//include_once
	//'/([{};\s])包含文件([\s\'\"\(;])/i'=>'$1include$2',
	'/([{};\s])跳转运行([\s\'\"\(;])/i'=>'$1goto$2',
	'/([{};,(\s.]+)延迟([\s\'\"\(]+)/i'=>'$1sleep$2',
	'/([{};,(\s.]+)微秒延迟([\s\'\"\(]+)/i'=>'$1usleep$2',


	//函数
	//
	//文件函数 (常用)
	'/([{};,(\s.]+)读取文件([\s\'\"\(]+)/i'=>'$1file_get_contents$2',
	'/([{};,(\s.]+)写入文件([\s\'\"\(]+)/i'=>'$1file_put_contents$2',
	'/([{};,(\s.]+)新建目录([\s\'\"\(]+)/i'=>'$1mkdir$2',
	'/([{};,(\s.]+)移动文件([\s\'\"\(]+)/i'=>'$1rename$2',
	'/([{};,(\s.]+)文件重命名([\s\'\"\(]+)/i'=>'$1rename$2',
	//file_exists
	'/([{};,(\s.]+)文件是否存在([\s\'\"\(]+)/i'=>'$1is_file$2',
	'/([{};,(\s.]+)目录是否存在([\s\'\"\(]+)/i'=>'$1is_dir$2',
	'/([{};,(\s.]+)删除文件([\s\'\"\(]+)/i'=>'$1unlink$2',
	'/([{};,(\s.]+)删除目录([\s\'\"\(]+)/i'=>'$1rmdir$2',
	'/([{};,(\s.]+)复制文件([\s\'\"\(]+)/i'=>'$1copy$2',
	//'/([{};,(\s.]+)目录可用空间([\s\'\"\(]+)/i'=>'$1disk_free_space$2',
	//'/([{};,(\s.]+)目录总空间([\s\'\"\(]+)/i'=>'$1disk_total_space$2',
	'/([{};,(\s.]+)打开文件([\s\'\"\(]+)/i'=>'$1fopen$2',
	'/([{};,(\s.]+)关闭文件([\s\'\"\(]+)/i'=>'$1fclose$2',
	'/([{};,(\s.]+)文件_指针是否结束([\s\'\"\(]+)/i'=>'$1feof$2',
	'/([{};,(\s.]+)文件_读取指针处字符([\s\'\"\(]+)/i'=>'$1fgetc$2',
	'/([{};,(\s.]+)文件_读取指针处一行([\s\'\"\(]+)/i'=>'$1fgets$2',
	'/([{};,(\s.]+)文件_读取指针处一行_过滤HTML([\s\'\"\(]+)/i'=>'$1fgetss$2',
	'/([{};,(\s.]+)文件_读入数组([\s\'\"\(]+)/i'=>'$1file$2',
	'/([{};,(\s.]+)文件_上次访问时间([\s\'\"\(]+)/i'=>'$1fileatime$2',
	'/([{};,(\s.]+)文件_上次修改时间([\s\'\"\(]+)/i'=>'$1filemtime$2',
	'/([{};,(\s.]+)文件_所有者([\s\'\"\(]+)/i'=>'$1fileowner$2',
	'/([{};,(\s.]+)文件_获取权限([\s\'\"\(]+)/i'=>'$1fileperms$2',
	'/([{};,(\s.]+)文件_大小([\s\'\"\(]+)/i'=>'$1filesize$2',
	'/([{};,(\s.]+)文件_类型([\s\'\"\(]+)/i'=>'$1filetype$2',
	'/([{};,(\s.]+)文件_锁([\s\'\"\(]+)/i'=>'$1flock$2',
	'/([{};,(\s.]+)文件_读取指针处所有数据([\s\'\"\(]+)/i'=>'$1fpassthru$2',
	'/([{};,(\s.]+)文件_是否可读([\s\'\"\(]+)/i'=>'$1is_readable$2',
	'/([{};,(\s.]+)文件_是否可写([\s\'\"\(]+)/i'=>'$1is_writable$2',


	//目录操作
	//
	'/([{};,(\s.]+)打开目录句柄([\s\'\"\(]+)/i'=>'$1opendir$2',
	'/([{};,(\s.]+)关闭目录句柄([\s\'\"\(]+)/i'=>'$1closedir$2',
	'/([{};,(\s.]+)目录_句柄读取([\s\'\"\(]+)/i'=>'$1readdir$2',

	//系统程序执行
	//
	'/([{};,(\s.]+)执行程序([\s\'\"\(]+)/i'=>'$1exec$2',
	'/([{};,(\s.]+)执行程序并返回结果([\s\'\"\(]+)/i'=>'$1system$2',



	//数组操作函数
	//
	'/([{};,(\s.]+)数组_索引是否存在([\s\'\"\(]+)/i'=>'$1array_key_exists$2',
	'/([{};,(\s.]+)数组_获取所有索引名称([\s\'\"\(]+)/i'=>'$1array_key_exists$2',
	'/([{};,(\s.]+)数组_合并([\s\'\"\(]+)/i'=>'$1array_merge$2',
	'/([{};,(\s.]+)数组_排序([\s\'\"\(]+)/i'=>'$1array_multisort$2',
	'/([{};,(\s.]+)数组_删除结尾元素([\s\'\"\(]+)/i'=>'$1array_pop$2',
	'/([{};,(\s.]+)数组_删除开头元素([\s\'\"\(]+)/i'=>'$1array_shift$2',
	'/([{};,(\s.]+)数组_所有值相乘([\s\'\"\(]+)/i'=>'$1array_product$2',
	'/([{};,(\s.]+)数组_所有值相加([\s\'\"\(]+)/i'=>'$1array_sum$2',
	
	'/([{};,(\s.]+)数组_结尾追加元素([\s\'\"\(]+)/i'=>'$1array_push$2',
	'/([{};,(\s.]+)数组_开头追加元素([\s\'\"\(]+)/i'=>'$1array_unshift$2',
	'/([{};,(\s.]+)数组_随机取元素([\s\'\"\(]+)/i'=>'$1array_rand$2',
	'/([{};,(\s.]+)数组_搜索值([\s\'\"\(]+)/i'=>'$1array_search$2',
	'/([{};,(\s.]+)数组_删除重复值([\s\'\"\(]+)/i'=>'$1array_unique$2',
	'/([{};,(\s.]+)数组索引总数([\s\'\"\(]+)/i'=>'$1count$2',

	'/([{};,(\s.]+)数组_是否存在该值([\s\'\"\(]+)/i'=>'$1in_array$2',
	'/([{};,(\s.]+)定义数组([\s\'\"\(]+)/i'=>'$1array$2',

	//时间日期
	'/([{};,(\s.]+)当前时间戳([\s\'\"\(]+)/i'=>'$1time$2',
	'/([{};,(\s.]+)格式化时间([\s\'\"\(]+)/i'=>'$1date$2',



	//字符串操作

	
	'/([{};,(\s.]+)分割字符串([\s\'\"\(]+)/i'=>'$1explode$2',
	'/([{};,(\s.]+)分割([\s\'\"\(]+)/i'=>'$1explode$2',
	'/([{};,(\s.]+)获取字符串长度([\s\'\"\(]+)/i'=>'$1strlen$2',
	'/([{};,(\s.]+)查找字符串位置([\s\'\"\(]+)/i'=>'$1strlen$2',
	'/([{};,(\s.]+)字符串_取部分([\s\'\"\(]+)/i'=>'$1strlen$2',
	'/([{};,(\s.]+)字符串_过滤HTML与PHP代码([\s\'\"\(]+)/i'=>'$1strlen$2',
	'/([{};,(\s.]+)转为小写([\s\'\"\(]+)/i'=>'$1strtolower$2',
	'/([{};,(\s.]+)转为大写([\s\'\"\(]+)/i'=>'$1strtoupper$2',
	'/([{};,(\s.]+)字符串_倒转([\s\'\"\(]+)/i'=>'$1strrev$2',
	'/([{};,(\s.]+)随机打乱字符串([\s\'\"\(]+)/i'=>'$1str_shuffle$2',
	'/([{};,(\s.]+)字符串_首字母转大写([\s\'\"\(]+)/i'=>'$1ucfirst$2',
	'/([{};,(\s.]+)字符串_买个段落首字母转大写([\s\'\"\(]+)/i'=>'$1ucwords$2',
	'/([{};,(\s.]+)字符串_截断数量([\s\'\"\(]+)/i'=>'$1wordwrap$2',
	'/([{};,(\s.]+)字符串_引号加斜杠([\s\'\"\(]+)/i'=>'$1addslashes$2',
	'/([{};,(\s.]+)两个字符串相似度([\s\'\"\(]+)/i'=>'$1similar_text$2',
	

	//网络
	//
	'/([{};,(\s.]+)DNS通信测试([\s\'\"\(]+)/i'=>'$1checkdnsrr$2',
	'/([{};,(\s.]+)获取域名指向IP([\s\'\"\(]+)/i'=>'$1gethostbyname$2',
	'/([{};,(\s.]+)获取域名指向IP_数组([\s\'\"\(]+)/i'=>'$1gethostbynamel$2',
	'/([{};,(\s.]+)IP转数字([\s\'\"\(]+)/i'=>'$1ip2long$2',
	'/([{};,(\s.]+)数字转IP([\s\'\"\(]+)/i'=>'$1long2ip$2',

	'/([{};,(\s.]+)打开套接字([\s\'\"\(]+)/i'=>'$1fsockopen$2',
	'/([{};,(\s.]+)打开套接字_持久([\s\'\"\(]+)/i'=>'$1pfsockopen$2',
	'/([{};,(\s.]+)关闭套接字([\s\'\"\(]+)/i'=>'$1fclose$2',
	'/([{};,(\s.]+)设置COOKIE([\s\'\"\(]+)/i'=>'$1setcookie$2',


	//框架Action
	'/([{};,(\s.]+)输出模板([\s\'\"\(]+)/i'=>'$1\$this->display$2',
	

	//框架Model
	'/->(.*)查找([\s\(]+)/i'=>'->$1find$2',

	'/->(.*)插入([\s\(]+)/i'=>'->$1insert$2',

	'/->(.*)插入更多([\s\(]+)/i'=>'->$1insertAll$2',

	'/->(.*)选择([\s\(]+)/i'=>'->$1select$2',

	'/->(.*)更新([\s\(]+)/i'=>'->$1update$2',

	'/->(.*)删除([\s\(]+)/i'=>'->$1delete$2',

	'/->(.*)是否存在([\s\(]+)/i'=>'->$1has$2',

	'/->(.*)替换([\s\(]+)/i'=>'->$1replace$2',

	'/->(.*)总数([\s\(]+)/i'=>'->$1count$2',

	'/->(.*)最大值([\s\(]+)/i'=>'->$1max$2',
	

	'/->(.*)最小值([\s\(]+)/i'=>'->$1min$2',

	'/->(.*)平均值([\s\(]+)/i'=>'->$1avg$2',
	
	'/->(.*)相加([\s\(]+)/i'=>'->$1sum$2',

	'/->(.*)调试([\s\(]+)/i'=>'->$1debug$2',
	
	//框架function
	'/([{};,(\s.]+)控制器([\s\'\"\(]+)/i'=>'$1A$2',
	'/([{};,(\s.]+)模型([\s\'\"\(]+)/i'=>'$1M$2',
	'/([{};,(\s.]+)支持库([\s\'\"\(]+)/i'=>'$1L$2',
	'/([{};,(\s.]+)配置文件([\s\'\"\(]+)/i'=>'$1C$2',
	'/([{};,(\s.]+)生成链接([\s\'\"\(]+)/i'=>'$1URL$2',
	'/([{};,(\s.]+)抛出错误([\s\'\"\(]+)/i'=>'$1E$2',
	'/([{};,(\s.]+)文件数据缓存([\s\'\"\(]+)/i'=>'$1F$2',

);